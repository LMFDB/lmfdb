language: sage
sudo: false
dist: trusty

# blocklist
branches:
  except:
  - web
  - dev

addons:
    apt:
        packages:
            # needed for sage
            - binutils
            - gcc
            - g++
            - gfortran
            - make
            - perl
            - tar
            - git
            - openssl
            - libssl-dev
            # needed for pyflakes
            - python-pip
            # to run nosetests in parallel
            - parallel


install:
    # assert parallel
    - parallel --version
    # install the latest pyflakes
    - pip install pyflakes --user
    # install the latest coveralls
    - pip install coveralls --user
    - export PATH=${HOME}/.local/bin/:${PATH}

    # install SAGE with GAP already built in
    # see: https://github.com/edgarcosta/binary-pkg
    - export SAGE_VERSION=8.8
    - export SAGE_DIR=${HOME}/SageMath
    - export SAGE="${SAGE_DIR}/sage"
    - export SAGE_INSTALL_GCC=no
    - export MAKE='make -j4'
    - wget  --no-verbose http://grace.mit.edu/sage-lmfdb/sage-${SAGE_VERSION}-Ubuntu_14.04-x86_64.tar.bz2
    # travis_wait extends the default 10 minute timeout to 30 minutes
    # what is the load on the server
    - uptime
    - travis_wait 40 time tar xf sage-${SAGE_VERSION}-Ubuntu_14.04-x86_64.tar.bz2 -C ${HOME}

    # trigger the patch once script
    - ${SAGE} --version > patch_once_log
    # assert that we have GAP
    - ${SAGE} -python -c 'from sage.all import gap;G = gap.TransitiveGroup(9, 2); print G'
    # install LMFDB requirements
    - ${SAGE} -pip install -r requirements.txt

before_script:
    # assert that devmirror.lmfdb.xyz accepts our connections
    - nc -vz  devmirror.lmfdb.xyz 5432
    # how much free ram do we have
    - free -m
    # what is the load on the server
    - uptime

script:
    # run pyflakes
    - pyflakes . > pyflakeslog
    - if [[ $(wc -l < pyflakeslog) != 0 ]]; then echo "ERROR pyflakes failed!"; cat pyflakeslog; else echo "PASS pyflakes is happy!"; fi
    # Check that pytest is installed
    - ${SAGE} -sh -c "pytest --version"
    # This runs without fail
    - ${SAGE} -sh -c "pytest --verbose -s --cov=lmfdb"

after_failure:
    - if [[ $(wc -l < pyflakeslog) != 0 ]]; then echo "ERROR pyflakes failed!"; cat pyflakeslog; else echo "PASS pyflakes is happy!"; fi

after_success:
    - ls -a
      #- COVERALLS_PARALLEL=true coveralls
    - coveralls
