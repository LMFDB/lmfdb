name: 'Snippet Setup'
description: 'Set up LMFDB environment for generating snippets'
    
runs:
  using: 'composite'
  steps:
  - uses: actions/checkout@v3

  - uses: conda-incubator/setup-miniconda@v2
    with:
      activate-environment: lmfdb
      auto-activate-base: false
      # environment-file: .environment.yml # now we install after cache
      channel-priority: strict
      # IMPORTANT: use-only-tar-bz2: true needs to be set for caching to work properly!
      use-only-tar-bz2: false

  - name: Cache conda
    uses: actions/cache@v3
    id: condacache
    env:
      # Increase this value to reset cache if .environment.yml has not changed
      CACHE_NUMBER: 0
    with:
      path: |
        /usr/share/miniconda/envs/lmfdb
      key:
        ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
        hashFiles('.environment.yml') }}

  - name: Install Julia
    uses: julia-actions/setup-julia@v2
    with:
      version: '1'          # latest version

  - name: Load Julia packages from cache
    id: julia-cache
    uses: julia-actions/cache@v2      

  - name: Install Oscar
    shell: bash -l {0}
    run: |
      julia -e 'using Pkg; Pkg.add("Oscar"); using Oscar'

  - name: Run install script
    shell: bash -l {0}
    # Only need to run install when deps has been changed
    if: steps.condacache.outputs.cache-hit != 'true'
    run: conda env create -f .environment.yml  || conda env update -f .environment.yml

  - name: Show conda info
    shell: bash -l {0}
    run: |
      conda info
      conda list

  - name: Cache pip
    uses: actions/cache@v3
    with:
      # This path is specific to Ubuntu
      path: ~/.cache/pip
      # Look to see if there is a cache hit for the corresponding requirements file
      key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
      restore-keys: |
        ${{ runner.os }}-pip-
        ${{ runner.os }}-

  - name: pip stuff
    shell: bash -l {0}
    run: |
      sage -pip install -r requirements.txt
