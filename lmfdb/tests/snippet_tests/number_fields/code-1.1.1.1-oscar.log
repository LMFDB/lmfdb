# snippet evaluation file generated by generate_snippet_tests.py

julia> Qx, x = polynomial_ring(QQ); K, a = number_field(x)
(Number field of degree 1 over QQ, 0)

julia> defining_polynomial(K)
x

julia> degree(K)
1

julia> signature(K)
(1, 0)

julia> OK = ring_of_integers(K); discriminant(OK)
1

julia> prime_divisors(discriminant((OK)))
ZZRingElem[]

julia> automorphisms(K)
ERROR: UndefVarError: `automorphisms` not defined in `Main`
Suggestion: check for spelling errors or missing imports.
Stacktrace:
 [1] top-level scope
   @ none:1

julia> basis(OK)
1-element Vector{AbsSimpleNumFieldOrderElem}:
 1

julia> class_group(K)
(Z/1, Class group map of set of ideals of OK)

julia> UK, fUK = unit_group(OK)
(Z/2, UnitGroup map of Maximal order of number field of degree 1 over QQ
)

julia> rank(UK)
1

julia> torsion_units_generator(OK)
-1

julia> [K(fUK(a)) for a in gens(UK)]
1-element Vector{AbsSimpleNumFieldElem}:
 -1

julia> regulator(K)
1.0000

julia> Qx, x = PolynomialRing(QQ); K, a = NumberField(x);
ERROR: UndefVarError: `PolynomialRing` not defined in `Main`
Suggestion: check for spelling errors or missing imports.
Stacktrace:
 [1] top-level scope
   @ none:1

julia> OK = ring_of_integers(K); DK = discriminant(OK);

julia> UK, fUK = unit_group(OK); clK, fclK = class_group(OK);

julia> r1,r2 = signature(K); RK = regulator(K); RR = parent(RK);

julia> hK = order(clK); wK = torsion_units_order(K);

julia> 2^r1 * (2*pi)^r2 * RK * hK / (wK * sqrt(RR(abs(DK))))
1.0000

julia> subfields(K)[2:end-1]
Tuple{AbsSimpleNumField, NumFieldHom{AbsSimpleNumField, AbsSimpleNumField, Hecke.MapDataFromAnticNumberField{AbsSimpleNumFieldElem}, Hecke.MapDataFromAnticNumberField{AbsSimpleNumFieldElem}, AbsSimpleNumFieldElem}}[]

julia> G, Gtx = galois_group(K); G, transitive_group_identification(G)
ERROR: ArgumentError: degree must be positive, not 0
Stacktrace:
 [1] macro expansion
   @ ~/.julia/packages/AbstractAlgebra/TVkLv/src/Assertions.jl:602 [inlined]
 [2] has_transitive_groups(deg::Int64)
   @ Oscar ~/.julia/packages/Oscar/T5Jnd/src/Groups/libraries/transitivegroups.jl:52
 [3] macro expansion
   @ ~/.julia/packages/AbstractAlgebra/TVkLv/src/Assertions.jl:601 [inlined]
 [4] transitive_group_identification(G::PermGroup)
   @ Oscar ~/.julia/packages/Oscar/T5Jnd/src/Groups/libraries/transitivegroups.jl:149
 [5] top-level scope
   @ none:1

julia> p = 7; pfac = factor(ideal(ring_of_integers(K), p)); [(e, valuation(norm(pr),p)) for (pr,e) in pfac]
1-element Vector{Tuple{Int64, Int64}}:
 (1, 1)

julia> 