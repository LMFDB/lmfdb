# snippet evaluation file generated by generate_snippet_tests.py

julia> Qx, x = polynomial_ring(QQ); K, a = number_field(x^2 + 1)
(Number field of degree 2 over QQ, _a)

julia> defining_polynomial(K)
x^2 + 1

julia> degree(K)
2

julia> signature(K)
(0, 1)

julia> OK = ring_of_integers(K); discriminant(OK)
-4

julia> prime_divisors(discriminant((OK)))
1-element Vector{ZZRingElem}:
 2

julia> automorphisms(K)
ERROR: UndefVarError: `automorphisms` not defined in `Main`
Suggestion: check for spelling errors or missing imports.
Stacktrace:
 [1] top-level scope
   @ none:1

julia> basis(OK)
2-element Vector{AbsSimpleNumFieldOrderElem}:
 1
 _a

julia> class_group(K)
(Z/1, Class group map of set of ideals of OK)

julia> UK, fUK = unit_group(OK)
(Z/4, UnitGroup map of Maximal order of number field of degree 2 over QQ
)

julia> rank(UK)
1

julia> torsion_units_generator(OK)
-_a

julia> [K(fUK(a)) for a in gens(UK)]
1-element Vector{AbsSimpleNumFieldElem}:
 -_a

julia> regulator(K)
1.0000

julia> Qx, x = PolynomialRing(QQ); K, a = NumberField(x^2 + 1);
ERROR: UndefVarError: `PolynomialRing` not defined in `Main`
Suggestion: check for spelling errors or missing imports.
Stacktrace:
 [1] top-level scope
   @ none:1

julia> OK = ring_of_integers(K); DK = discriminant(OK);

julia> UK, fUK = unit_group(OK); clK, fclK = class_group(OK);

julia> r1,r2 = signature(K); RK = regulator(K); RR = parent(RK);

julia> hK = order(clK); wK = torsion_units_order(K);

julia> 2^r1 * (2*pi)^r2 * RK * hK / (wK * sqrt(RR(abs(DK))))
[0.7854 +/- 3.02e-5]

julia> subfields(K)[2:end-1]
Tuple{AbsSimpleNumField, NumFieldHom{AbsSimpleNumField, AbsSimpleNumField, Hecke.MapDataFromAnticNumberField{AbsSimpleNumFieldElem}, Hecke.MapDataFromAnticNumberField{AbsSimpleNumFieldElem}, AbsSimpleNumFieldElem}}[]

julia> G, Gtx = galois_group(K); G, transitive_group_identification(G)
(Sym(2), (2, 1))

julia> p = 7; pfac = factor(ideal(ring_of_integers(K), p)); [(e, valuation(norm(pr),p)) for (pr,e) in pfac]
1-element Vector{Tuple{Int64, Int64}}:
 (1, 2)

julia> 