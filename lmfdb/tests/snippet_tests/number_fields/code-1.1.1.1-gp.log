\\ snippet evaluation file generated by generate_snippet_tests.py
gp> K = bnfinit(y, 1)
[[;], [;], [;], [;], []~, 0, [y, [1, 0], 1, 1, [Mat(1), Mat(1), Mat(16), Mat(1), 1, Mat(1), [1, 0], []], [0.E-57], [1], Mat(1), Mat(1)], [[1, [], []], 1, 1, [2, -1], []], [[;], [;], [;], [], [;], [;]], [0, 0, 0]]
gp> K.pol
y
gp> poldegree(K.pol)
1
gp> K.sign
[1, 0]
gp> K.disc
1
gp> factor(abs(K.disc))[,1]~
[]
gp> K.zk
[1]
gp> K.clgp
[1, [], []]
gp> K.fu
[]
gp> K.tu[2]
-1
gp> K.fu
[]
gp> K.reg
1
gp> K = bnfinit(x, 1);
gp> [polcoeff (lfunrootres (lfuncreate (K))[1][1][2], -1), 2^K.r1 * (2*Pi)^K.r2 * K.reg * K.no / (K.tu[1] * sqrt (abs (K.disc)))]
[1.0000000000000000000000000000000000000, 1.0000000000000000000000000000000000000]
gp> L = nfsubfields(K); L[2..length(b)]
  ***   at top-level: L=nfsubfields(K);L[2..length(b)]
  ***                                  ^---------------
  *** _[_.._]: inconsistent dimensions in _[..].
gp> polgalois(K.pol)
[1, 1, 1, "S1"]
gp> p = 7; pfac = idealprimedec(K, p); vector(length(pfac), j, [pfac[j][3], pfac[j][4]])
[[1, 1]]
gp> 